generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Airport {
  ident             String @id @default(uuid()) @db.VarChar(7)
  type              String @db.VarChar(15)
  name              String @db.Text()
  latdeg            Float
  longdeg           Float
  elevft            Int
  continent         String @db.VarChar(2)
  isocountry        String @db.VarChar(2)
  isoregion         String @db.VarChar(7)
  city              String @db.Text()
  scheduled_service String @db.VarChar(3)
  gpscode           String @db.VarChar(4)
  iatacode          String @db.VarChar(3)
  localcode         String @db.VarChar(7)
  homelink          String @db.Text()
  wikipedialink     String @db.Text()
  keywords          String @db.Text()
}

model Circuit {
  circuitid  Int    @id @default(autoincrement())
  circuitref String @unique
  name       String @unique
  location   String
  country    String
  lat        Float
  lng        Float
  alt        Float?
  url        String
  Race       Race[]

  @@map("circuits")
}

model Constructor {
  constructorid  Int          @id @default(autoincrement())
  constructorref String
  name           String
  nationality    String
  url            String?
  Qualifying     Qualifying[]
  Results        Results[]

  @@map("constructors")
}

model Country {
  code      String @id
  name      String
  continent String
  keywords  String

  @@map("countries")
}

model Driver {
  driverid       Int              @id
  driverref      String
  number         Int
  code           String
  forename       String
  surname        String
  dob            DateTime
  nationality    String
  url            String
  DriverStanding DriverStanding[]
  Laptimes       Laptimes[]
  Pitstops       Pitstops[]
  Qualifying     Qualifying[]
  Results        Results[]

  @@map("driver")
}

model Race {
  raceid         Int              @id @default(autoincrement())
  year           Int
  round          Int
  circuitid      Int
  name           String
  date           DateTime
  time           String
  url            String
  DriverStanding DriverStanding[]
  Laptimes       Laptimes[]
  Pitstops       Pitstops[]
  Qualifying     Qualifying[]
  circuit        Circuit          @relation(fields: [circuitid], references: [circuitid])

  Results Results[]
  @@map("races")
}

model DriverStanding {
  driverstandingsid Int    @id @default(autoincrement())
  raceid            Int
  driverid          Int
  points            Float
  position          Int
  positiontext      String
  wins              Int
  driver            Driver @relation(fields: [driverid], references: [driverid])
  race              Race   @relation(fields: [raceid], references: [raceid])

  @@map("driverstandings")
}

model GeoCity {
  geonameid      String @id
  name           String
  asciiname      String
  alternatenames String
  lat            Float
  long           Float
  featureclass   String
  featurecode    String
  country        String
  cc2            String
  admin1code     String
  admin2code     String
  admin3code     String
  admin4code     String
  population     String
  elevation      String
  dem            String
  timezone       String
  modification   String

  @@map("geocities15k")
}

model Laptimes {
  raceid       Int
  driverid     Int
  lap          Int
  position     Int
  time         String
  milliseconds Int
  driver       Driver     @relation(fields: [driverid], references: [driverid])
  race         Race       @relation(fields: [raceid], references: [raceid])
  Pitstops     Pitstops[]

  @@id([raceid, driverid, lap])
  @@map("laptimes")
}

model Pitstops {
  raceid       Int
  driverid     Int
  stop         Int
  lap          Int
  time         String
  duration     String
  milliseconds Int
  driver       Driver   @relation(fields: [driverid], references: [driverid])
  race         Race     @relation(fields: [raceid], references: [raceid])
  laptimes     Laptimes @relation(fields: [driverid, raceid, lap], references: [driverid, raceid, lap])

  @@id([raceid, driverid, stop])
  @@map("pitstops")
}

model Qualifying {
  qualifyid     Int         @id
  raceid        Int
  driverid      Int
  constructorid Int
  number        Int
  position      Int
  q1            String?
  q2            String?
  q3            String?
  pole_position String
  driver        Driver      @relation(fields: [driverid], references: [driverid])
  race          Race        @relation(fields: [raceid], references: [raceid])
  constructor   Constructor @relation(fields: [constructorid], references: [constructorid])

  @@map("qualifying")
}

model Results {
  resultid        Int         @id
  raceid          Int
  driverid        Int
  constructorid   Int
  number          Int?
  grid            Int?
  position        Int?
  positiontext    Int?
  positionorder   Int?
  points          Int?
  laps            Int?
  time            Int?
  milliseconds    Int?
  fastestlap      Int?
  rank            Int?
  fastestlaptime  String?
  fastestlapspeed String?
  statusid        Int?
  driver          Driver      @relation(fields: [driverid], references: [driverid])
  race            Race        @relation(fields: [raceid], references: [raceid])
  constructor     Constructor @relation(fields: [constructorid], references: [constructorid])

  @@map("results")
}

model Seasons {
  year Int    @id
  url  String

  @@map("seasons")
}

model Status {
  statusid Int     @id
  status   String?

  @@map("status")
}

model User {
  userId     Int    @id
  login      String
  password   String
  tipo       String
  idoriginal Int

  @@map("Users")
}
